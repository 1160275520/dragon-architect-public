
* {
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
}

html {
    font-family: "Open Sans";
}

body {
    margin: 8px;
}


p {
    margin: 2px;
}

header > div {
    margin: auto;
    width: 100%;
}

header h1 {
    float: left;
    overflow: auto;
    margin-right: 50px;
}

#navControls {
    float: right;
    mragin-left: 50px;
}

.headerCenter {
}

#someheaderthingy {
    display: flex;
    height: 100px;
    background: #ffeedd;
}

#main {
    position: relative;
}

.titleScreen, .levelSelector {
    margin: 30px;
    border: 1px solid black;
    padding: 30px;
}

/* TODO pick a non-crap styling for these things */
.titleScreen *, .levelSelector h2, .levelSelector > button {
    text-align: center;
    margin: 20px auto;
    padding: 10px;
    display: block;
}

#topButtonBar {
    overflow: auto;
}

#btn-run {
    float: right;
    background-color: #37B03F;
    font-size: 32pt;
    font-weight: bold;
}


#blockly {
  width: auto;
  height: 800px;
}

.mainLeftSide {
    position: absolute;
    width: 40%;
    padding: 0;
    margin: 0;
}

.mainRightSide {
    position: relative;
    margin-left: 40%;
    padding: 0;
}

#topButtonBar {
    /*height: 300px;*/
}

.control-button {
    width: 40px;
    height: 40px;
    border: 2px solid black;
}

#unityPlayer {
    position: relative;
    width: 100%;
    padding: 0;
    margin: 0;
}
#unityPlayer:after {
    padding-top: 75%;
    display: block;
    content: '';
}
#unityPlayer embed {
    width: 100%;
    height: 100%;
    padding: 0;
    margin: 0;
    position: absolute;
}

#languageMenu {
    vertical-align: top;
    margin-top: 12px;
    visibility: hidden;
}

#btn-undo {
    position: absolute;
    right: 20px;
    top: 20px;
    font-size: 16pt;
}

#statement-counter {
    position: absolute;
    left: 190px;
    top: 20px;
    font-size: 18pt;
    font-family: sans-serif;
}

@-webkit-keyframes trash-arrow {
    0%   {-webkit-transform: rotate(90deg) translate(0px,0px); }
    50%  {-webkit-transform: rotate(90deg) translate(0px,50px);}
    100% {-webkit-transform: rotate(90deg) translate(0px,0px); }
}

@keyframes trash-arrow {
    0%   {transform: rotate(90deg) translate(0px,0px);}
    50%  {transform: rotate(90deg) translate(0px,50px);}
    100% {transform: rotate(90deg) translate(0px,0px);}
}

#trash-arrow {
    position: absolute;
    right: 125px;
    bottom: -10px;
    height: 150px;
    -webkit-animation-name: trash-arrow;
    -webkit-animation-duration: 2s;
    -webkit-animation-iteration-count: infinite;
    -webkit-animation-direction: alternate;
    -webkit-animation-timing-function: ease-in-out;
    -webkit-animation-play-state: paused;
    animation-name: trash-arrow;
    animation-duration: 2s;
    animation-iteration-count: infinite;
    animation-direction: alternate;
    animation-timing-function: ease-in-out;
    animation-play-state: paused;
    visibility: hidden;
}

#instructionsContainer {
    position: absolute;
    z-index: 1;
    height: 100%;
    width: 98%; /* less 2 percent to account for blockly being 8 pixels smaller than it's container */
}

#instructionsBackground {
    top: 0px;
    left: 10px;
    padding:5px;
    background: #333; /* default background for browsers without gradient support */
    opacity: 0.95;
    border-radius:10px;
}

#instructions {
    color:#fff;
    font-family: monospace;
    top: -3px;
    position: relative;
}

.instructionsShown {
    border-style: solid;
    border-width: 4px;
    border-color: #B24E3A;
    border-radius:10px;
    padding: 25px;  
}

#dragonIcon {
    top: 8px;
    left: 5px;
    position: relative;
}

#XXXinstructions:before {
    content:"";
    position:absolute;
    bottom:-20px; /* value = - border-top-width - border-bottom-width */
    left:60px; /* controls horizontal position */
    border:0;
    border-right-width:30px; /* vary this value to change the angle of the vertex */
    border-bottom-width:20px; /* vary this value to change the height of the triangle. must be equal to the corresponding value in :after */
    border-style:solid;
    border-color:transparent #999;
}

/* creates the narrower right-angled triangle */
#XXXinstructions:after {
    content:"";
    position:absolute;
    bottom:-20px; /* value = - border-top-width - border-bottom-width */
    left:80px; /* value = (:before's left) + (:before's border-right/left-width)  - (:after's border-right/left-width) */
    border:0;
    border-right-width:10px; /* vary this value to change the angle of the vertex */
    border-bottom-width:20px; /* vary this value to change the height of the triangle. must be equal to the corresponding value in :before */
    border-style:solid;
    border-color:transparent #999;
}

@-webkit-keyframes instructionsShow {
    0% {
        width: 50px;
        height: 50px;
    }

    50% {
        width: 90%;
        height: 50px;
    }

    100% {
        width: 90%;
        height: 100%;
    }
}

@keyframes instructionsShow {
    0% {
        width: 50px;
        height: 50px;
    }

    50% {
        width: 90%;
        height: 50px;
    }

    100% {
        width: 90%;
        height: 100%;
    }
}

.instructionsShow {
    -webkit-animation-name: instructionsShow;
    animation-name: instructionsShow;
    -webkit-animation-duration: 0.75s;
    animation-duration: 0.75s;
    -webkit-animation-fill-mode: both;
    animation-fill-mode: both;
}

@-webkit-keyframes instructionsHide {
    0% {
        width: 90%;
        height: 100%;
    }

    50% {
        width: 90%;
        height: 50px;
    }

    100% {
        width: 50px;
        height: 50px;
    }
}

@keyframes instructionsHide {
    0% {
        width: 90%;
        height: 100%;
    }

    50% {
        width: 90%;
        height: 50px;
    }

    100% {
        width: 50px;
        height: 50px;
    }
}

.instructionsHide {
    -webkit-animation-name: instructionsHide;
    animation-name: instructionsHide;
    -webkit-animation-duration: 0.75s;
    animation-duration: 0.75s;
    -webkit-animation-fill-mode: both;
    animation-fill-mode: both;
}

@-webkit-keyframes speechBubble {
    0% {
        opacity: 0;
        -webkit-transform: translateY(0px);
        -ms-transform: translateY(0px);
        transform: translateY(0px);
    }

    25% {
        opacity: 1;
        -webkit-transform: translateY(0px);
        -ms-transform: translateY(0px);
        transform: translateY(0px);
    }

    35%, 50%, 65%, 80%, 95% {
        -webkit-transform: translateY(0px);
        -ms-transform: translateY(0px);
        transform: translateY(0px);
    }

    72% {
        -webkit-transform: translateY(-30px);
        -ms-transform: translateY(-30px);
        transform: translateY(-30px);
    }

    88% {
        -webkit-transform: translateY(-15px);
        -ms-transform: translateY(-15px);
        transform: translateY(-15px);
    }
}

@keyframes speechBubble {
    0% {
        opacity: 0;
        -webkit-transform: translateY(0px);
        -ms-transform: translateY(0px);
        transform: translateY(0px);
    }

    25% {
        opacity: 1;
        -webkit-transform: translateY(0px);
        -ms-transform: translateY(0px);
        transform: translateY(0px);
    }

    35%, 50%, 65%, 80%, 95% {
        -webkit-transform: translateY(0px);
        -ms-transform: translateY(0px);
        transform: translateY(0px);
    }

    72% {
        -webkit-transform: translateY(-30px);
        -ms-transform: translateY(-30px);
        transform: translateY(-30px);
    }

    88% {
        -webkit-transform: translateY(-15px);
        -ms-transform: translateY(-15px);
        transform: translateY(-15px);
    }
}

.speechBubble {
    -webkit-animation-name: speechBubble;
    animation-name: speechBubble;
    -webkit-animation-duration: 1.2s;
    animation-duration: 1.2s;
    -webkit-animation-fill-mode: both;
    animation-fill-mode: both;
}

.tick { 
    position: relative;
    text-align:center;
    font-family: monospace;
    font-weight: bold;
}

#sliderContainer {
    width: 300px;
    background-color: rgba(90, 90, 90, 0.2);
    border-color: #000;
    border-width: 2px;
    border-style: solid;
    padding: 5px;
}

.levelSelector svg {
    overflow: hidden;
}

.levelSelector .node rect {
    stroke: #333;
    stroke-width: 1.5px;
    fill: #fff;
}

.levelSelector .node circle {
    stroke: #333;
    stroke-width: 1.5px;
    fill: #fff;
}

.levelSelector .node, .clickable {
  cursor: pointer;
}

.levelSelector .edgeLabel rect {
    fill: #fff;
}

.levelSelector .edgePath {
    stroke: #333;
    stroke-width: 1.5px;
    fill: none;
}
